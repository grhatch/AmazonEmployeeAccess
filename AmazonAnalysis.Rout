
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Amazon Analysis
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(vroom)

Attaching package: ‘vroom’

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks vroom::spec(), readr::spec()
✖ recipes::step()   masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(stacks)
> library(poissonreg)
> library(ggmosaic)
> library(embed)
> library(ggplot2)
> 
> # R - get into an interactive environment
> # exit - leave server
> # R CMD BATCH --no-save --no-restore AmazonAnalysis.R & - run entire r script in the background (&) without saving workspace and without loading something into the environment
> # top - show running processes
> # save(file="filename.RData", list=c("logReg_wf))
> # load("filename.RData")
> 
> 
> 
> 
> # Read in data
> # train <- vroom("./STAT348/AmazonEmployeeAccess/amazon-employee-access-challenge/train.csv")
> # test <- vroom("./STAT348/AmazonEmployeeAccess/amazon-employee-access-challenge/test.csv")
> 
> train <- vroom("./amazon-employee-access-challenge/train.csv") 
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- vroom("./amazon-employee-access-challenge/test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> 
> eda_data <- data.frame(lapply(train, factor))
> 
> #BAKE THE COLUMNS IN THE RECIPE
> 
> eda_recipe <- recipe(ACTION~., data=train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
+   step_dummy(all_nominal_predictors())  # dummy variable encoding
>   #step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
>   #step_mutate_at(all_numeric_predictors(), fn = factor)
>   
> 
> prep <- prep(eda_recipe)
> baked <- bake(prep, new_data = train)
> 
> eda_data <- data.frame(lapply(baked, factor))
> 
> 
> ggplot(data=eda_data) + 
+   geom_mosaic(aes(x=product(RESOURCE_other), fill=ACTION))
Warning message:
`unite_()` was deprecated in tidyr 1.2.0.
ℹ Please use `unite()` instead.
ℹ The deprecated feature was likely used in the ggmosaic package.
  Please report the issue at <https://github.com/haleyjeppson/ggmosaic>. 
> 
> ggplot(data=eda_data) + 
+   geom_boxplot(aes(x=ROLE_FAMILY_DESC_other, y=ACTION))
> 
> 
> 
> ###########################
> ## Logistic Regression ####
> ###########################
> 
> train_new <- train %>%
+   mutate(ACTION = as.factor(ACTION))
> 
> logreg_recipe <- recipe(ACTION~., data=train_new) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .01) %>% # combines categorical values that occur <5% into an "other" value
+   step_dummy(all_nominal_predictors()) # dummy variable encoding
>   #step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
>   #step_mutate_at(all_numeric_predictors(), fn = factor)
> 
> logreg_model <- logistic_reg() %>% #Type of model
+   set_engine("glm")
> 
> logreg_workflow <- workflow() %>%
+   add_recipe(logreg_recipe) %>%
+   add_model(logreg_model) %>%
+   fit(data = train_new) # Fit the workflow
> 
> amazon_pred <- predict(logreg_workflow,
+                               new_data=test,
+                               type="prob") %>% # "class" or "prob" (see doc
+   bind_cols(.,test) %>% # bind predictions with test data
+   select(id, .pred_1) %>% # Just keep datetime and predictions
+   rename(Action = .pred_1) # rename pred to count (for submission to Kaggle)
Warning message:
In predict.lm(object, newdata, se.fit, scale = 1, type = if (type ==  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
>   #mutate(Action = pmax(0,Action)) %>% #pointwise max of (0,prediction)
>   #mutate(Action = ifelse(is.na(Action), 0, Action)) %>%
>   #mutate(datetime=as.character(format(datetime))) #needed for right format
> 
> vroom_write(amazon_pred, "amazon_pred.csv", delim = ',')
> 
> 
> 
> ###################################
> ## Penalized Logistic Regression ##
> ###################################
> 
> penlog_recipe <- recipe(ACTION~., data=train_new) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>% # combines categorical values that occur <5% into an "other" value
+   #step_dummy(all_nominal_predictors()) # dummy variable encoding
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
> 
> penlog_model <- logistic_reg(mixture=tune(),penalty=tune()) %>%
+   set_engine("glmnet")
> 
> penlog_wf <- workflow() %>%
+   add_recipe(penlog_recipe) %>%
+   add_model(penlog_model)
> 
> L <- 5
> ## Grid of values to tune over
> penlog_tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = L) ## L^2 total tuning possibilities
> 
> K <- 5
> ## Split data for CV
> folds <- vfold_cv(train_new, v = K, repeats=1)
> 
> ## Run the CV
> penlog_CV_results <- penlog_wf %>%
+   tune_grid(resamples=folds,
+           grid=penlog_tuning_grid,
+           metrics=metric_set(roc_auc
+                              #, f_meas, sens, recall, spec,precision, accuracy
+                              )) #Or leave metrics NULL
> 
> 
> ## Find Best Tuning Parameters
> penlog_bestTune <- penlog_CV_results %>%
+   select_best("roc_auc")
> 
> ## Finalize the Workflow & fit it
> penlog_final_wf <- penlog_wf %>%
+   finalize_workflow(penlog_bestTune) %>%
+   fit(data=train_new)
> 
> ## Predict
> penlog_pred <- penlog_final_wf %>%
+   predict(new_data = test, type="prob") %>%
+   bind_cols(.,test) %>% # bind predictions with test data
+   select(id, .pred_1) %>% # Just keep datetime and predictions
+   rename(Action = .pred_1) # rename pred to count (for submission to Kaggle)
> 
> vroom_write(penlog_pred, "penlog_pred.csv", delim = ',')
> 
> 
> # 
> # 
> # ###################
> # ## Random Forest ##
> # ###################
> # 
> # rf_model <- rand_forest(mtry = tune(),
> #                       min_n=tune(),
> #                       trees=500) %>%
> #   set_engine("ranger") %>%
> #   set_mode("classification")
> # 
> # 
> # 
> # rf_recipe <- recipe(ACTION~., data=train_new) %>%
> #   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
> #   step_other(all_nominal_predictors(), threshold = .001) %>% # combines categorical values that occur <5% into an "other" value
> #   #step_dummy(all_nominal_predictors()) # dummy variable encoding
> #   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) #target encoding
> # 
> # 
> # # set up workflow
> # rf_wf <- workflow() %>%
> #   add_recipe(rf_recipe) %>%
> #   add_model(rf_model)
> # 
> # L <- 5
> # ## Grid of values to tune over; these should be params in the model
> # rf_tuning_grid <- grid_regular(mtry(range = c(1,10)),
> #                                min_n(),
> #                                levels = L) ## L^2 total tuning possibilities
> # 
> # K <- 5
> # ## Split data for CV
> # rf_folds <- vfold_cv(train_new, v = K, repeats=1)
> # 
> # ## Run CV
> # rf_CV_results <- rf_wf %>%
> #   tune_grid(resamples=rf_folds,
> #             grid=rf_tuning_grid,
> #             metrics=metric_set(roc_auc))
> # 
> # ## Find Best Tuning Parameters
> # rf_bestTune <- rf_CV_results %>%
> #   select_best("roc_auc")
> # 
> # 
> # ## Finalize the Workflow & fit it
> # rf_final_wf <-
> #   rf_wf %>%
> #   finalize_workflow(rf_bestTune) %>%
> #   fit(data=train_new)
> # 
> # ## Predict
> # rf_pred <- rf_final_wf %>%
> #   predict(new_data = test, type="prob") %>%
> #   bind_cols(.,test) %>% # bind predictions with test data
> #   select(id, .pred_1) %>% # Just keep datetime and predictions
> #   rename(Action = .pred_1) # rename pred to count (for submission to Kaggle)
> # 
> # vroom_write(rf_pred, "rf_classification_pred.csv", delim = ',')
> 
> proc.time()
   user  system elapsed 
274.416   3.311 134.807 
